#!/usr/bin/env node

/**
 * Module dependencies.
 */
let app = require('../app')
let debug = require('debug')('wikimoecard:server')
let http = require('http')
let https = require('https')
let demining = require('../api/demining')
let wssystem = require('../api/wssystem')
let fs = require('fs')
const chalk = require('chalk')
const cheerio = require('cheerio')
const _ = require('lodash')

// creat HTML
const $ = cheerio.load(fs.readFileSync('public/index.html', 'utf8'), {
  decodeEntities: false,
})
const footerHTML = fs.readFileSync('templete/footer.html', 'utf8')
$('#wm_index_footer').html(footerHTML)
$('title').text(global.myAppConfig.browserTitle || '维基萌抽卡')
fs.writeFileSync('public/index.html', $.html())
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(global.myAppConfig.port || '3000')
// app.set('port', port);
/**
 * Create HTTP server.
 */
var server = null
if (global.myAppConfig.https) {
  const httpsOption = {
    key: fs.readFileSync(global.myAppConfig.keyFileSrc),
    cert: fs.readFileSync(global.myAppConfig.certFileSrc),
  }
  server = https
    .createServer(httpsOption, app)
    .listen(global.myAppConfig.sslPort, '0.0.0.0')
  http
    .createServer(function (req, res) {
      res.writeHead(301, { Location: global.myAppConfig.site })
      res.end()
    })
    .listen(global.myAppConfig.port, '0.0.0.0')
} else {
  server = http.createServer(app).listen(global.myAppConfig.port, '0.0.0.0')
}
var io = require('socket.io')(server)

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
server.on('error', onError)
server.on('listening', onListening)

// io.of('/test').on('connection', async (socket) => {
//   socket.emit('acc', 'a')
//   setInterval(() => {
//     socket.emit('acc', 'a')
//   }, 1000)
//   setInterval(() => {
//     socket.emit('test', 'a')
//   }, 1000)
// })

io.of('/wsdemining').on('connection', async (socket) => {
  if (global.demining.loaing) {
    // 数据库准备中
    socket.emit('demining', { code: 406, msg: '矿场正在重启，请稍后再试!' })
    socket.disconnect()
    return false
  }
  let token = socket.handshake.query.dt
  // console.log("dt",token);
  const userData = await demining.login(token, socket).catch((err) => {
    throw err
  })
  if (userData.status) {
    // 用户验证通过

    const socketId = socket.id
    const userEmail = userData.userInfo.email
    // 判断是否有同样的用户在线(废止)
    // const inPlayerList = global.demining.onlinePlayer.filter(
    //   (item) => item.email === userEmail
    // )
    // if (inPlayerList.length > 0) {
    //   //如果有同样的用户在线
    //   for (let i = 0; i < inPlayerList.length; i++) {
    //     // 循环让这些账号下线
    //     const playerConnected = io.sockets.connected[inPlayerList[i].socketId]
    //     if (playerConnected) {
    //       console.info(chalk.yellow(inPlayerList[i].email + '被顶号，强制下线'))
    //       socket.to(inPlayerList[0].socketId).emit('demining', {
    //         code: 406,
    //         msg: '有同样的账号登陆了矿场，请注意账号安全！',
    //       })
    //       playerConnected.disconnect()
    //     }
    //   }
    // }
    const UA = socket.request.headers['user-agent']
    const newPlayer = {
      email: userEmail,
      md5: userData.userInfo.md5,
      nickName: userData.userInfo.nickName,
      loginTime: Math.round(new Date().getTime() / 1000),
      device: UA,
      socketId: socketId,
    }
    global.demining.onlinePlayer.push(newPlayer)
    console.info(chalk.green(userEmail + '登陆挖矿服务器!IP为:' + userData.IP))
    // 发送在线人数
    const newUserDataCount = _.groupBy(
      global.demining.onlinePlayer,
      (value) => {
        return value.email
      }
    )
    io.of('/wsdemining').emit('userCount', {
      userCount: Object.keys(newUserDataCount).length,
    })
    socket.on('demining', (data) => {
      // console.log('deminging');
      // console.log(data);
      if (!_.isObject(data)) {
        socket.emit('demining', {
          code: 1,
          msg: '内部错误请联系管理员！',
          time: data.time,
        })
      } else {
        // 处理挖矿逻辑
        demining.mine(socket, data)
      }
    })
    socket.on('disconnect', function () {
      console.info(chalk.green(userEmail + '下线！'))
      global.demining.onlinePlayer = global.demining.onlinePlayer.filter(
        (item) => item.socketId !== socketId
      )
      const newUserDataCount = _.groupBy(
        global.demining.onlinePlayer,
        (value) => {
          return value.email
        }
      )
      io.of('/wsdemining').emit('userCount', {
        userCount: Object.keys(newUserDataCount).length,
      })
    })
  } else {
    // 用户验证失败
    console.info(chalk.yellow(userData.IP + '登陆挖矿服务器失败,Token有误!'))
    socket.emit('demining', { code: 403, msg: '账户信息已失效，请重新登录！' })
    socket.disconnect()
  }
})
// 系统websocket
io.of('/wssystem').on('connection', async (socket) => {
  let token = socket.handshake.query.dt
  // console.log("dt",token);
  const userData = await wssystem.login(token, socket).catch((err) => {
    throw err
  })
  if (userData.status) {
    // 用户验证通过

    const socketId = socket.id
    const userEmail = userData.userInfo.email

    const UA = socket.request.headers['user-agent']
    const newPlayer = {
      email: userEmail,
      md5: userData.userInfo.md5,
      nickName: userData.userInfo.nickName,
      loginTime: Math.round(new Date().getTime() / 1000),
      device: UA,
      socketId: socketId,
    }
    global.onlinePlayer.push(newPlayer)
    console.info(chalk.green(userEmail + '登陆抽卡系统!IP为:' + userData.IP))
    // 发送在线人数
    const newUserDataCount = _.groupBy(
      global.onlinePlayer,
      (value) => {
        return value.email
      }
    )
    io.of('/wssystem').emit('userCount', {
      userCount: Object.keys(newUserDataCount).length,
    })
    socket.on('searchUser', (data) => {
      wssystem.searchUser(socket, data)
    })
    socket.on('checkTime', () => {
      socket.emit('getTime', new Date().getTime())
    })
    socket.on('disconnect', function () {
      console.info(chalk.green(userEmail + '下线抽卡系统！'))
      global.onlinePlayer = global.onlinePlayer.filter(
        (item) => item.socketId !== socketId
      )
      const newUserDataCount = _.groupBy(
        global.onlinePlayer,
        (value) => {
          return value.email
        }
      )
      io.of('/wssystem').emit('userCount', {
        userCount: Object.keys(newUserDataCount).length,
      })
    })
  } else {
    // 用户验证失败
    console.info(chalk.yellow(userData.IP + '登陆抽卡服务器失败,Token有误!'))
    socket.disconnect()
  }
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
process.on('uncaughtException', function (err) {
  if (err.message === 'getaddrinfo ENOTFOUND mongo') {
    // 如果是连不上 mongo，则退出进程
    process.exit(1)
  }
})